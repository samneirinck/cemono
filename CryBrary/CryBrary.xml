<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CryBrary</name>
    </assembly>
    <members>
        <member name="T:CryEngine.PathUtils">
            <summary>
            Provides a clean method of retrieving commonly used engine filepaths.
            </summary>
        </member>
        <member name="M:CryEngine.PathUtils.GetRootFolder">
            <summary>
            Gets the root engine folder.
            </summary>
            <returns>The filepath to the root folder as a string, ex:</returns>
            <example>"C:\CryENGINE3"</example>
        </member>
        <member name="M:CryEngine.PathUtils.GetScriptDumpFolder">
            <summary>
            Gets the folder in which script dumps are stored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CryEngine.PathUtils.GetBinaryFolder">
            <summary>
            Gets the current folder containing binaries relevant to current build type (Bin32 / Bin64).
            </summary>
            <returns>The filepath to the Binary folder as a string, ex:
            <example>"C:\CryENGINE3\Bin32"</example></returns>
        </member>
        <member name="M:CryEngine.PathUtils.GetEngineFolder">
            <summary>
            Gets the engine folder.
            CryENGINE uses this store engine content which is not specific to the game being developed, i.e. shaders and configuration files.
            </summary>
            <returns>The filepath to the Engine folder as a string, ex:
            <example>"C:\CryENGINE3\Engine"</example></returns>
        </member>
        <member name="M:CryEngine.PathUtils.GetGameFolder">
            <summary>
            Gets the current game folder.
            CryENGINE uses this as the root for all game-related content.
            </summary>
            <returns>The filepath to the Game folder as a string, ex:
            <example>"C:\CryENGINE3\Game"</example></returns>
        </member>
        <member name="M:CryEngine.PathUtils.GetScriptsFolder">
            <summary>
            Gets the folder in which the engine stores scripts.
            We use this as the root for our .cs files and .dll plugins.
            </summary>
            <returns>The filepath to the Scripts folder as a string, ex:
            <example>"C:\CryENGINE3\Game\Scripts"</example></returns>
        </member>
        <member name="M:CryEngine.PathUtils.GetScriptFolder(CryEngine.Initialization.ScriptType)">
            <summary>
            Gets the folder in which a certain type of scripts are located.
            </summary>
            <param name="scriptType"></param>
            <returns>The folder in which scripts of this type are located; i.e. Game\Scripts\Entities</returns>
            <example>GetScriptFolder(MonoScriptType.Entity)</example>
        </member>
        <member name="M:CryEngine.Debug.Log(System.String,System.Object[])">
            <summary>
            Logs a message to the console
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:CryEngine.Debug.Log(System.String)">
            <summary>
            Logs a message to the console
            </summary>
        </member>
        <member name="M:CryEngine.Debug.LogAlways(System.String,System.Object[])">
            <summary>
            Logs a message to the console, regardless of log_verbosity settings
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:CryEngine.Debug.LogAlways(System.String)">
            <summary>
            Logs a message to the console, regardless of log_verbosity settings
            </summary>
        </member>
        <member name="M:CryEngine.Debug.LogException(System.Exception)">
            <summary>
            Logs an exception message to the console
            </summary>
            <remarks>Useful when exceptions are caught and data is still needed from them</remarks>
            <param name="ex"></param>
        </member>
        <member name="M:CryEngine.Debug.Warning(System.String,System.Object[])">
            <summary>
            Outputs a warning message
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:CryEngine.Debug.Warning(System.String)">
            <summary>
            Outputs a warning message
            </summary>
        </member>
        <member name="T:CryEngine.Entity">
            <summary>
            The base class for all entities in the game world.
            </summary>
        </member>
        <member name="T:CryEngine.CryScriptInstance">
            <summary>
            This interface permits derived classes to be used for script compilation recognition.
            </summary>
        </member>
        <member name="M:CryEngine.CryScriptInstance.OnUpdate">
            <summary>
            Called each frame if script has been set to be regularly updated (See Updated property)
            </summary>
        </member>
        <member name="P:CryEngine.CryScriptInstance.ReceiveUpdates">
            <summary>
            Controls whether the entity receives an update per frame.
            </summary>
        </member>
        <member name="M:CryEngine.FlowNode.OnPortActivated(System.Int32,System.Object)">
            <summary>
            Called if one or more input ports have been activated.
            </summary>
        </member>
        <member name="M:CryEngine.FlowNode.OnInit">
            <summary>
            Called after level has been loaded, is not called on serialization.
            </summary>
        </member>
        <member name="M:CryEngine.FlowNode.GetPortInt(System.Action{System.Int32})">
            <summary>
            Gets the int value of an flownode port.
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.FlowNode.GetPortFloat(System.Action{System.Single})">
            <summary>
            Gets the float value of an flownode port.
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.FlowNode.GetPortVec3(System.Action{CryEngine.Vec3})">
            <summary>
            Gets the int value of an flownode port.
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.FlowNode.GetPortString(System.Action{System.String})">
            <summary>
            Gets the string value of an flownode port.
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.FlowNode.GetPortBool(System.Action{System.Boolean})">
            <summary>
            Gets the bool value of an flownode port.
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.FlowNode.IsPortActive(System.Int32)">
            <summary>
            Used to check whether an input port is currently activated.
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Entity._LoadCharacter(System.UInt32,System.String,System.Int32)">
            <summary>
            Loads an non-static model on the object (.chr, .cdf, .cga)
            </summary>
            <param name="entityId"></param>
            <param name="fileName"></param>
            <param name="slot"></param>
        </member>
        <member name="M:CryEngine.Entity.InternalSpawn(CryEngine.EntityId)">
            <summary>
            Initializes the entity, not recommended to set manually.
            </summary>
            <param name="entityId"></param>
            <returns>IsEntityFlowNode</returns>
        </member>
        <member name="M:CryEngine.Entity.IsEntityFlowNode">
            <summary>
            Returns true if this entity contains input or output ports.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Entity.OnSpawn">
            <summary>
            This callback is called when this entity has finished spawning. The entity has been created and added to the list of entities.
            </summary>
        </member>
        <member name="M:CryEngine.Entity.OnRemove">
            <summary>
            Called when the entity is being removed.
            </summary>
            <returns>True to allow removal, false to deny.</returns>
        </member>
        <member name="M:CryEngine.Entity.OnReset(System.Boolean)">
            <summary>
            Called when resetting the state of the entity in Editor.
            </summary>
            <param name="enteringGame">true if currently entering gamemode, false if exiting.</param>
        </member>
        <member name="M:CryEngine.Entity.OnStartGame">
            <summary>
            Called when game is started (games may start multiple times)
            </summary>
        </member>
        <member name="M:CryEngine.Entity.OnStartLevel">
            <summary>
            Called when the level is started.
            </summary>
        </member>
        <member name="M:CryEngine.Entity.OnEnterArea(CryEngine.EntityId,CryEngine.EntityId)">
            <summary>
            Sent when triggering entity enters to the area proximity.
            </summary>
            <param name="triggerEntityId"></param>
            <param name="areaEntityId"></param>
        </member>
        <member name="M:CryEngine.Entity.OnLeaveArea(CryEngine.EntityId,CryEngine.EntityId)">
            <summary>
            Sent when triggering entity leaves the area proximity.
            </summary>
            <param name="triggerEntityId"></param>
            <param name="areaEntityId"></param>
        </member>
        <member name="M:CryEngine.Entity.OnCollision(CryEngine.EntityId,CryEngine.Vec3,CryEngine.Vec3,System.Int16,CryEngine.Vec3)">
            <summary>
            Sent on entity collision.
            </summary>
            <param name="targetEntityId"></param>
            <param name="hitPos"></param>
            <param name="dir"></param>
            <param name="materialId"></param>
            <param name="contactNormal"></param>
        </member>
        <member name="M:CryEngine.Entity.OnHit(CryEngine.HitInfo)">
            <summary>
            
            </summary>
        </member>
        <member name="M:CryEngine.Entity.OnInit">
            <summary>
            Called after level has been loaded, is not called on serialization.
            </summary>
        </member>
        <member name="F:CryEngine.Entity.storedProperties">
            <summary>
            Temporarily stored so we can set them properly on spawn.
            </summary>
        </member>
        <member name="M:CryEngine.Entity.LoadObject(System.String,System.Int32)">
            <summary>
            Loads a mesh for this entity. Can optionally load multiple meshes using entity slots.
            </summary>
            <param name="name"></param>
            <param name="slotNumber"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Entity._SpawnEntity(CryEngine.EntitySpawnParams,System.Boolean)">
            <summary>
            Spawns an entity with the specified parameters.
            </summary>
            <param name="spawnParams">The <see cref="T:CryEngine.EntitySpawnParams"/></param>
            <param name="autoInit">Should the entity automatically be initialised?</param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Entity.RegisterClass(CryEngine.EntityConfig)">
            <summary>
            Register a new entity type.
            </summary>
            <param name="config">The Entity configuration.</param>
            <returns>True if registration succeeded, otherwise false.</returns>
        </member>
        <member name="M:CryEngine.Entity.Spawn``1(System.String,CryEngine.Vec3,System.Nullable{CryEngine.Vec3},System.Nullable{CryEngine.Vec3},System.Boolean,CryEngine.EntityFlags)">
            <summary>
            Spawn a new instance of entity type T.
            </summary>
            <typeparam name="T">The entity type</typeparam>
            <param name="name"></param>
            <param name="pos"></param>
            <param name="rot"></param>
            <param name="scale"></param>
            <param name="autoInit"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Entity.Get``1(CryEngine.EntityId)">
            <summary>
            Get an entity by its unique ID.
            </summary>
            <param name="entityId">The ID as an unsigned integer.</param>
            <returns>A reference to the entity.</returns>
            <remarks>If the entity does not exist in the managed space, this function will attempt to find
            a C++ entity with the specified ID></remarks>
        </member>
        <member name="M:CryEngine.Entity.Get(CryEngine.EntityId)">
            <summary>
            Get an entity by its unique ID.
            </summary>
            <param name="entityId">The ID as an unsigned integer.</param>
            <returns>A reference to the entity.</returns>
            <remarks>If the entity does not exist in the managed space, this function will attempt to find
            a C++ entity with the specified ID></remarks>
        </member>
        <member name="M:CryEngine.Entity.Find(System.String)">
            <summary>
            Get an entity by name.
            </summary>
            <param name="name">The name of the entity.</param>
            <returns>A reference to the entity.</returns>
            <remarks>If multiple entities have the same name, it will return the first found.
            Consider using IDs where necessary.</remarks>
        </member>
        <member name="M:CryEngine.Entity.GetEntities(System.String)">
            <summary>
            Gets an array of entities that are of a given class.
            </summary>
            <param name="className">The entity class to search for.</param>
            <returns>An array of entities.</returns>
        </member>
        <member name="M:CryEngine.Entity.GetEntities``1">
            <summary>
            Gets an array of entities that are of a given class.
            </summary>
            <typeparam name="T">The entity class to search for.</typeparam>
            <returns>An array of entities of type T.</returns>
        </member>
        <member name="T:CryEngine.Engine">
            <summary>
            Provides an direct interface to the 3DEngine.
            </summary>
        </member>
        <member name="T:CryEngine.Ray">
            <summary>
            Represents a three dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="F:CryEngine.Ray.Position">
            <summary>
            The position in three dimensional space where the ray starts.
            </summary>
        </member>
        <member name="F:CryEngine.Ray.Direction">
            <summary>
            The normalized direction in which the ray points.
            </summary>
        </member>
        <member name="M:CryEngine.Ray.#ctor(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Ray"/> struct.
            </summary>
            <param name="position">The position in three dimensional space of the origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
        </member>
        <member name="M:CryEngine.Ray.Cast(CryEngine.RaycastHit@,CryEngine.EntityQueryFlags,CryEngine.RayWorldIntersectionFlags,System.Int32,CryEngine.EntityId[])">
            <summary>
            Steps through the entity grid and raytraces entities
            traces a finite ray from org along dir
            </summary>
            <param name="hits"></param>
            <param name="objectTypes"></param>
            <param name="flags"></param>
            <param name="maxHits"></param>
            <param name="skipEntities"></param>
            <returns>The total amount of hits detected (solid and pierceable)</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Ray@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Plane@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Plane@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.BoundingBox@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.BoundingBox@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.BoundingSphere@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.BoundingSphere@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.op_Equality(CryEngine.Ray,CryEngine.Ray)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Ray.op_Inequality(CryEngine.Ray,CryEngine.Ray)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Ray.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Ray.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Ray.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.Ray.Equals(CryEngine.Ray)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:CryEngine.Vec4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Ray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:CryEngine.Math.ZeroTolerance">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="M:CryEngine.Math.DegreesToRadians(System.Double)">
            <summary>
            Converts degrees to radians
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Math.DegreesToRadians(System.Single)">
            <summary>
            Converts degrees to radians
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Math.RadiansToDegrees(System.Double)">
            <summary>
            Converts radians to degrees
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Math.RadiansToDegrees(System.Single)">
            <summary>
            Converts radians to degrees
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Math.Sqrt(System.Double)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Math.Sqrt(System.Single)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Math.IsInRange``1(``0,``0,``0)">
            <summary>
            Determines whether a value is inside the specified range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Math.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps a value given a specified range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Serialization.CrySerializer.TryWriteReference(CryEngine.Serialization.ObjectReference)">
            <summary>
            Checks if this object has already been serialized.
            </summary>
            <param name="objectReference"></param>
            <returns>true if object had already been serialized.</returns>
        </member>
        <member name="P:CryEngine.Serialization.CrySerializer.ObjectReferences">
            <summary>
            We store a dictionary of all serialized objects in order to not create new instances of types with identical hash codes. (same objects)
            </summary>
        </member>
        <member name="T:CryEngine.EntityId">
            <summary>
            Entity ID's store references to game entities as unsigned integers. This class wraps that functionality for CLS compliance.
            </summary>
        </member>
        <member name="T:CryEngine.EntityAttribute">
            <summary>
            Defines additional information used by the entity registration system.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.Name">
            <summary>
            Sets the Entity class name. Uses class name if not set.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.EditorHelper">
            <summary>
            The helper mesh displayed inside Sandbox.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.Flags">
            <summary>
            The class flags for this entity.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.Category">
            <summary>
            The category in which the entity will be placed.
            Does not currently function. All entities are placed inside the Default folder.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.Icon">
            <summary>
            The helper graphic displayed inside Sandbox.
            </summary>
        </member>
        <member name="T:CryEngine.EditorPropertyAttribute">
            <summary>
            Defines a property that is displayed and editable inside Sandbox.
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Min">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Type">
            <summary>
            If set, overrides the field type.
            Should be used for special types such as files.
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Description">
            <summary>
            The description to display when the user hovers over this property inside Sandbox.
            </summary>
        </member>
        <member name="T:CryEngine.EntityPropertyType">
            <summary>
            Defines the list of supported editor types.
            Bool is not currently functioning.
            </summary>
        </member>
        <member name="M:CryEngine.Input.RegisterAction(System.String,CryEngine.Input.ActionMapEventDelegate)">
            <summary>
            Registers an event declared in the players actionmap. Without invoking this, Your KeyEventDelegate will never be invoked with the new action.
            </summary>
            <param name="actionName"></param>
            <param name="eventDelegate"></param>
        </member>
        <member name="F:CryEngine.KeyEvent.OnPress">
            <summary>
            Used when the action key is pressed
            </summary>
        </member>
        <member name="F:CryEngine.KeyEvent.OnRelease">
            <summary>
            Used when the action key is released
            </summary>
        </member>
        <member name="F:CryEngine.KeyEvent.OnHold">
            <summary>
            Used when the action key is held
            </summary>
        </member>
        <member name="F:CryEngine.KeyEvent.AnalogCmd">
            <summary>
            Used when analog compare op succeeds
            </summary>
        </member>
        <member name="T:CryEngine.Plane">
            <summary>
            Represents a plane in three dimensional space.
            </summary>
        </member>
        <member name="F:CryEngine.Plane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="F:CryEngine.Plane.D">
            <summary>
            The distance of the plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:CryEngine.Plane.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Plane"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CryEngine.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Plane"/> struct.
            </summary>
            <param name="a">The X component of the normal.</param>
            <param name="b">The Y component of the normal.</param>
            <param name="c">The Z component of the normal.</param>
            <param name="d">The distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:CryEngine.Plane.#ctor(CryEngine.Vec3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Plane"/> struct.
            </summary>
            <param name="value">The normal of the plane.</param>
            <param name="d">The distance of the plane along its normal from the origin</param>
        </member>
        <member name="M:CryEngine.Plane.#ctor(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Plane"/> struct.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal of the plane.</param>
        </member>
        <member name="M:CryEngine.Plane.#ctor(CryEngine.Vec3,CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Plane"/> struct.
            </summary>
            <param name="point1">First point of a triangle defining the plane.</param>
            <param name="point2">Second point of a triangle defining the plane.</param>
            <param name="point3">Third point of a triangle defining the plane.</param>
        </member>
        <member name="M:CryEngine.Plane.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Plane"/> struct.
            </summary>
            <param name="values">The values to assign to the A, B, C, and D components of the plane. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:CryEngine.Plane.Normalize">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
        </member>
        <member name="M:CryEngine.Plane.ToArray">
            <summary>
            Creates an array containing the elements of the plane.
            </summary>
            <returns>A four-element array containing the components of the plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Ray@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Plane@,CryEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:CryEngine.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Multiply(CryEngine.Plane@,System.Single,CryEngine.Plane@)">
            <summary>
            Scales each component of the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:CryEngine.Plane.Multiply(CryEngine.Plane,System.Single)">
            <summary>
            Scales each component of the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.Scale(CryEngine.Plane@,System.Single,CryEngine.Plane@)">
            <summary>
            Scales the distance component of the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:CryEngine.Plane.Scale(CryEngine.Plane,System.Single)">
            <summary>
            Scales the distance component of the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.Dot(CryEngine.Plane@,CryEngine.Vec4@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified plane and vector.</param>
        </member>
        <member name="M:CryEngine.Plane.Dot(CryEngine.Plane,CryEngine.Vec4)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified plane and vector.</returns>
        </member>
        <member name="M:CryEngine.Plane.DotCoordinate(CryEngine.Plane@,CryEngine.Vec3@,System.Single@)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</param>
        </member>
        <member name="M:CryEngine.Plane.DotCoordinate(CryEngine.Plane,CryEngine.Vec3)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.DotNormal(CryEngine.Plane@,CryEngine.Vec3@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified vector and the normal of the plane.</param>
        </member>
        <member name="M:CryEngine.Plane.DotNormal(CryEngine.Plane,CryEngine.Vec3)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified vector and the normal of the plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.Normalize(CryEngine.Plane@,CryEngine.Plane@)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <param name="result">When the method completes, contains the normalized plane.</param>
        </member>
        <member name="M:CryEngine.Plane.Normalize(CryEngine.Plane)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <returns>The normalized plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.Transform(CryEngine.Plane@,CryEngine.Quat@,CryEngine.Plane@)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:CryEngine.Plane.Transform(CryEngine.Plane,CryEngine.Quat)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.Transform(CryEngine.Plane[],CryEngine.Quat@)">
            <summary>
            Transforms an array of normalized planes by a quaternion rotation.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CryEngine.Plane.op_Multiply(System.Single,CryEngine.Plane)">
            <summary>
            Scales each component of the plane by the given value.
            </summary>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="plane">The plane to scale.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.op_Multiply(CryEngine.Plane,System.Single)">
            <summary>
            Scales each component of the plane by the given value.
            </summary>
            <param name="plane">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.op_Equality(CryEngine.Plane,CryEngine.Plane)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Plane.op_Inequality(CryEngine.Plane,CryEngine.Plane)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Plane.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Plane.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Plane.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.Plane.Equals(CryEngine.Plane)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:CryEngine.Vec4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CryEngine.Plane.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, C, or D component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the A component, 1 for the B component, 2 for the C component, and 3 for the D component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:CryEngine.PlaneIntersectionType">
            <summary>
            Describes the result of an intersection with a plane in three dimensions.
            </summary>
        </member>
        <member name="F:CryEngine.PlaneIntersectionType.Back">
            <summary>
            The object is behind the plane.
            </summary>
        </member>
        <member name="F:CryEngine.PlaneIntersectionType.Front">
            <summary>
            The object is in front of the plane.
            </summary>
        </member>
        <member name="F:CryEngine.PlaneIntersectionType.Intersecting">
            <summary>
            The object is intersecting the plane.
            </summary>
        </member>
        <member name="M:CryEngine.View.Create">
            <summary>
            Creates a new, empty view.
            </summary>
        </member>
        <member name="M:CryEngine.View.Remove(CryEngine.View)">
            <summary>
            Removes an existing view.
            </summary>
            <param name="view"></param>
        </member>
        <member name="P:CryEngine.View.Active">
            <summary>
            The currently active view.
            </summary>
        </member>
        <member name="P:CryEngine.View.FoV">
            <summary>
            The current field of view.
            </summary>
        </member>
        <member name="T:CryEngine.ExcludeFromCompilationAttribute">
            <summary>
            If this attribute is attached to a class, it will be excluded from compilation.
            </summary>
        </member>
        <member name="T:CryEngine.Serialization.AppDomainSerializer">
            <summary>
            Handles serializing script instances for an app domain reload.
            </summary>
        </member>
        <member name="M:CryEngine.ParticleEffect.Get(System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="effectName"></param>
            <param name="loadResources">Load all required resources?</param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.ParticleEffect.Spawn(CryEngine.Vec3,System.Nullable{CryEngine.Vec3},System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="independent"></param>
            <param name="pos"></param>
            <param name="dir">Is set to Vec3.Up if null</param>
            <param name="scale"></param>
        </member>
        <member name="T:CryEngine.EntityFlags">
            <summary>
            These flags control entity instance behaviour.
            </summary>
        </member>
        <member name="T:CryEngine.EntityClassFlags">
            <summary>
            These flags define behaviour for entity classes.
            </summary>
        </member>
        <member name="F:CryEngine.EntityClassFlags.Invisible">
            <summary>
            If set this class will not be visible in editor,and entity of this class cannot be placed manually in editor.
            </summary>
        </member>
        <member name="F:CryEngine.EntityClassFlags.Default">
            <summary>
            If this is default entity class.
            </summary>
        </member>
        <member name="F:CryEngine.EntityConfig.registerParams">
            <summary>
            The registration information.
            </summary>
        </member>
        <member name="F:CryEngine.EntityConfig.properties">
            <summary>
            The properties that will be displayed inside Sandbox.
            </summary>
        </member>
        <member name="T:CryEngine.Quat">
            <summary>
            Represents a four dimensional mathematical quaternion.
            </summary>
        </member>
        <member name="F:CryEngine.Quat.Identity">
            <summary>
            The identity <see cref="T:CryEngine.Quat"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:CryEngine.Quat.V">
            <summary>
            The X, Y and Z components of the quaternion.
            </summary>
        </member>
        <member name="F:CryEngine.Quat.W">
            <summary>
            The W component of the quaternion.
            </summary>
        </member>
        <member name="M:CryEngine.Quat.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Quat"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CryEngine.Quat.#ctor(CryEngine.Vec4)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Quat"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the components.</param>
        </member>
        <member name="M:CryEngine.Quat.#ctor(CryEngine.Vec3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Quat"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:CryEngine.Quat.#ctor(CryEngine.Vec2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Quat"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:CryEngine.Quat.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Quat"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the quaternion.</param>
            <param name="y">Initial value for the Y component of the quaternion.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:CryEngine.Quat.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Quat"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the quaternion. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:CryEngine.Quat.Conjugate">
            <summary>
            Conjugates the quaternion.
            </summary>
        </member>
        <member name="M:CryEngine.Quat.Invert">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
        </member>
        <member name="M:CryEngine.Quat.Length">
            <summary>
            Calculates the length of the quaternion.
            </summary>
            <returns>The length of the quaternion.</returns>
            <remarks>
            <see cref="M:CryEngine.Quat.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Quat.LengthSquared">
            <summary>
            Calculates the squared length of the quaternion.
            </summary>
            <returns>The squared length of the quaternion.</returns>
            <remarks>
            This method may be preferred to <see cref="M:CryEngine.Quat.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Quat.Normalize">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
        </member>
        <member name="M:CryEngine.Quat.ToArray">
            <summary>
            Creates an array containing the elements of the quaternion.
            </summary>
            <returns>A four-element array containing the components of the quaternion.</returns>
        </member>
        <member name="M:CryEngine.Quat.Barycentric(CryEngine.Quat@,CryEngine.Quat@,CryEngine.Quat@,System.Single,System.Single,CryEngine.Quat@)">
            <summary>
            Returns a <see cref="T:CryEngine.Quat"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:CryEngine.Quat"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CryEngine.Quat"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CryEngine.Quat"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains a new <see cref="T:CryEngine.Quat"/> containing the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:CryEngine.Quat.Barycentric(CryEngine.Quat,CryEngine.Quat,CryEngine.Quat,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:CryEngine.Quat"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:CryEngine.Quat"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CryEngine.Quat"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CryEngine.Quat"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:CryEngine.Quat"/> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:CryEngine.Quat.Conjugate(CryEngine.Quat@,CryEngine.Quat@)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <param name="result">When the method completes, contains the conjugated quaternion.</param>
        </member>
        <member name="M:CryEngine.Quat.Conjugate(CryEngine.Quat)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <returns>The conjugated quaternion.</returns>
        </member>
        <member name="M:CryEngine.Quat.Dot(CryEngine.Quat@,CryEngine.Quat@,System.Single@)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <param name="result">When the method completes, contains the dot product of the two quaternions.</param>
        </member>
        <member name="M:CryEngine.Quat.Dot(CryEngine.Quat,CryEngine.Quat)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:CryEngine.Quat.Exponential(CryEngine.Quat@,CryEngine.Quat@)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <param name="result">When the method completes, contains the exponentiated quaternion.</param>
        </member>
        <member name="M:CryEngine.Quat.Exponential(CryEngine.Quat)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <returns>The exponentiated quaternion.</returns>
        </member>
        <member name="M:CryEngine.Quat.Invert(CryEngine.Quat@,CryEngine.Quat@)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <param name="result">When the method completes, contains the conjugated and renormalized quaternion.</param>
        </member>
        <member name="M:CryEngine.Quat.Invert(CryEngine.Quat)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <returns>The conjugated and renormalized quaternion.</returns>
        </member>
        <member name="M:CryEngine.Quat.Lerp(CryEngine.Quat@,CryEngine.Quat@,System.Single,CryEngine.Quat@)">
            <summary>
            Performs a linear interpolation between two quaternions.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two quaternions.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CryEngine.Quat.Lerp(CryEngine.Quat,CryEngine.Quat,System.Single)">
            <summary>
            Performs a linear interpolation between two quaternion.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CryEngine.Quat.Logarithm(CryEngine.Quat@,CryEngine.Quat@)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <param name="result">When the method completes, contains the natural logarithm of the quaternion.</param>
        </member>
        <member name="M:CryEngine.Quat.Logarithm(CryEngine.Quat)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <returns>The natural logarithm of the quaternion.</returns>
        </member>
        <member name="M:CryEngine.Quat.Normalize(CryEngine.Quat@,CryEngine.Quat@)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <param name="result">When the method completes, contains the normalized quaternion.</param>
        </member>
        <member name="M:CryEngine.Quat.Normalize(CryEngine.Quat)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:CryEngine.Quat.RotationAxis(CryEngine.Vec3@,System.Single,CryEngine.Quat@)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:CryEngine.Quat.RotationAxis(CryEngine.Vec3,System.Single)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:CryEngine.Quat.RotationYawPitchRoll(System.Single,System.Single,System.Single,CryEngine.Quat@)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            </summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:CryEngine.Quat.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            </summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:CryEngine.Quat.Slerp(CryEngine.Quat@,CryEngine.Quat@,System.Single,CryEngine.Quat@)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the spherical linear interpolation of the two quaternions.</param>
        </member>
        <member name="M:CryEngine.Quat.Slerp(CryEngine.Quat,CryEngine.Quat,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
        </member>
        <member name="M:CryEngine.Quat.Squad(CryEngine.Quat@,CryEngine.Quat@,CryEngine.Quat@,CryEngine.Quat@,System.Single,CryEngine.Quat@)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Thrid source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <param name="result">When the method completes, contains the spherical quadrangle interpolation of the quaternions.</param>
        </member>
        <member name="M:CryEngine.Quat.Squad(CryEngine.Quat,CryEngine.Quat,CryEngine.Quat,CryEngine.Quat,System.Single)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Thrid source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <returns>The spherical quadrangle interpolation of the quaternions.</returns>
        </member>
        <member name="M:CryEngine.Quat.SquadSetup(CryEngine.Quat,CryEngine.Quat,CryEngine.Quat,CryEngine.Quat)">
            <summary>
            Sets up control points for spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <returns>An array of three quaternions that represent control points for spherical quadrangle interpolation.</returns>
        </member>
        <member name="M:CryEngine.Quat.op_Addition(CryEngine.Quat,CryEngine.Quat)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:CryEngine.Quat.op_Subtraction(CryEngine.Quat,CryEngine.Quat)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:CryEngine.Quat.op_UnaryNegation(CryEngine.Quat)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:CryEngine.Quat.op_Multiply(System.Single,CryEngine.Quat)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:CryEngine.Quat.op_Multiply(CryEngine.Quat,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:CryEngine.Quat.op_Multiply(CryEngine.Quat,CryEngine.Quat)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:CryEngine.Quat.op_Equality(CryEngine.Quat,CryEngine.Quat)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Quat.op_Inequality(CryEngine.Quat,CryEngine.Quat)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Quat.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Quat.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Quat.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Quat.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Quat.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.Quat.Equals(CryEngine.Quat)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Quat"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CryEngine.Quat"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Quat"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Quat.Equals(CryEngine.Quat,System.Single)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Quat"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CryEngine.Quat"/> to compare with this instance.</param>
            <param name="epsilon">The amount of error allowed.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Quat"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Quat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CryEngine.Quat.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is equivalent to the identity quaternion.
            </summary>
            <value>
            <c>true</c> if this instance is an identity quaternion; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CryEngine.Quat.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:CryEngine.Quat.Angle">
            <summary>
            Gets the angle of the quaternion.
            </summary>
            <value>The quaternion's angle.</value>
        </member>
        <member name="P:CryEngine.Quat.Axis">
            <summary>
            Gets the axis components of the quaternion.
            </summary>
            <value>The axis components of the quaternion.</value>
        </member>
        <member name="P:CryEngine.Quat.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:CryEngine.Collision">
            <summary>
            Contains static methods to help in determining intersections, containment, etc.
            </summary>
        </member>
        <member name="M:CryEngine.Collision.ClosestPointPointTriangle(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines the closest point between a point and a triangle.
            </summary>
            <param name="point">The point to test.</param>
            <param name="vertex1">The first vertex to test.</param>
            <param name="vertex2">The second vertex to test.</param>
            <param name="vertex3">The third vertex to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:CryEngine.Collision.ClosestPointPlanePoint(CryEngine.Plane@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines the closest point between a <see cref="T:CryEngine.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:CryEngine.Collision.ClosestPointBoxPoint(CryEngine.BoundingBox@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines the closest point between a <see cref="T:CryEngine.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:CryEngine.Collision.ClosestPointSpherePoint(CryEngine.BoundingSphere@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines the closest point between a <see cref="T:CryEngine.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere"></param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="T:CryEngine.Vec3"/>.</param>
        </member>
        <member name="M:CryEngine.Collision.ClosestPointSphereSphere(CryEngine.BoundingSphere@,CryEngine.BoundingSphere@,CryEngine.Vec3@)">
            <summary>
            Determines the closest point between a <see cref="T:CryEngine.BoundingSphere"/> and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="T:CryEngine.Vec3"/>.</param>
            <remarks>
            If the two spheres are overlapping, but not directly ontop of each other, the closest point
            is the 'closest' point of intersection. This can also be considered is the deepest point of
            intersection.
            </remarks>
        </member>
        <member name="M:CryEngine.Collision.DistancePlanePoint(CryEngine.Plane@,CryEngine.Vec3@)">
            <summary>
            Determines the distance between a <see cref="T:CryEngine.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:CryEngine.Collision.DistanceBoxPoint(CryEngine.BoundingBox@,CryEngine.Vec3@)">
            <summary>
            Determines the distance between a <see cref="T:CryEngine.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:CryEngine.Collision.DistanceBoxBox(CryEngine.BoundingBox@,CryEngine.BoundingBox@)">
            <summary>
            Determines the distance between a <see cref="T:CryEngine.BoundingBox"/> and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:CryEngine.Collision.DistanceSpherePoint(CryEngine.BoundingSphere@,CryEngine.Vec3@)">
            <summary>
            Determines the distance between a <see cref="T:CryEngine.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:CryEngine.Collision.DistanceSphereSphere(CryEngine.BoundingSphere@,CryEngine.BoundingSphere@)">
            <summary>
            Determines the distance between a <see cref="T:CryEngine.BoundingSphere"/> and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsPoint(CryEngine.Ray@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a point.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsRay(CryEngine.Ray@,CryEngine.Ray@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray1">The first ray to test.</param>
            <param name="ray2">The second ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
            <remarks>
            This method performs a ray vs ray intersection test based on the following formula
            from Goldman.
            <code>s = det([o_2 - o_1, d_2, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            <code>t = det([o_2 - o_1, d_1, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            Where o_1 is the position of the first ray, o_2 is the position of the second ray,
            d_1 is the normalized direction of the first ray, d_2 is the normalized direction
            of the second ray, det denotes the determinant of a matrix, x denotes the cross
            product, [ ] denotes a matrix, and || || denotes the length or magnitude of a vector.
            </remarks>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsPlane(CryEngine.Ray@,CryEngine.Plane@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsPlane(CryEngine.Ray@,CryEngine.Plane@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsTriangle(CryEngine.Ray@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            This method tests if the ray intersects either the front or back of the triangle.
            If the ray is parallel to the triangle's plane, no intersection is assumed to have
            happened. If the intersection of the ray and the triangle is behind the origin of
            the ray, no intersection is assumed to have happened. In both cases of assumptions,
            this method returns false.
            </remarks>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsTriangle(CryEngine.Ray@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsBox(CryEngine.Ray@,CryEngine.BoundingBox@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsBox(CryEngine.Ray@,CryEngine.BoundingBox@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsSphere(CryEngine.Ray@,CryEngine.BoundingSphere@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsSphere(CryEngine.Ray@,CryEngine.BoundingSphere@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.BoundingSphere"/>. 
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.PlaneIntersectsPoint(CryEngine.Plane@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.PlaneIntersectsPlane(CryEngine.Plane@,CryEngine.Plane@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Plane"/> and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.PlaneIntersectsPlane(CryEngine.Plane@,CryEngine.Plane@,CryEngine.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Plane"/> and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:CryEngine.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            Although a ray is set to have an origin, the ray returned by this method is really
            a line in three dimensions which has no real origin. The ray is considered valid when
            both the positive direction is used and when the negative direction is used.
            </remarks>
        </member>
        <member name="M:CryEngine.Collision.PlaneIntersectsTriangle(CryEngine.Plane@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Plane"/> and a triangle.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.PlaneIntersectsBox(CryEngine.Plane@,CryEngine.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Plane"/> and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.PlaneIntersectsSphere(CryEngine.Plane@,CryEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Plane"/> and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.BoxIntersectsBox(CryEngine.BoundingBox@,CryEngine.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.BoundingBox"/> and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.BoxIntersectsSphere(CryEngine.BoundingBox@,CryEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.BoundingBox"/> and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.SphereIntersectsTriangle(CryEngine.BoundingSphere@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.BoundingSphere"/> and a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.SphereIntersectsSphere(CryEngine.BoundingSphere@,CryEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.BoundingSphere"/> and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere1">First sphere to test.</param>
            <param name="sphere2">Second sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.BoxContainsPoint(CryEngine.BoundingBox@,CryEngine.Vec3@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingBox"/> contains a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.Collision.BoxContainsBox(CryEngine.BoundingBox@,CryEngine.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingBox"/> contains a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.Collision.BoxContainsSphere(CryEngine.BoundingBox@,CryEngine.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingBox"/> contains a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.Collision.SphereContainsPoint(CryEngine.BoundingSphere@,CryEngine.Vec3@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingSphere"/> contains a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.Collision.SphereContainsTriangle(CryEngine.BoundingSphere@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingSphere"/> contains a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.Collision.SphereContainsBox(CryEngine.BoundingSphere@,CryEngine.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingSphere"/> contains a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.Collision.SphereContainsSphere(CryEngine.BoundingSphere@,CryEngine.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingSphere"/> contains a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="T:CryEngine.Actor">
            <summary>
            WIP Player class. TODO: Redo, currently very limited in terms of callbacks + interoperability with C++ backend
            </summary>
        </member>
        <member name="M:CryEngine.Actor.InternalSpawn(CryEngine.EntityId,System.Int32)">
            <summary>
            Initializes the player.
            </summary>
            <param name="entityId"></param>
            <param name="channelId"></param>
        </member>
        <member name="T:CryEngine.Vec4">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:CryEngine.Vec4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CryEngine.Vec4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec4"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.#ctor(CryEngine.Vec3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.#ctor(CryEngine.Vec2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec4"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:CryEngine.Vec4.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:CryEngine.Vec4.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="M:CryEngine.Vec4.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:CryEngine.Vec4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Add(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec4.Add(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Subtract(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec4.Subtract(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Multiply(CryEngine.Vec4@,System.Single,CryEngine.Vec4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.Multiply(CryEngine.Vec4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Modulate(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.Modulate(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Divide(CryEngine.Vec4@,System.Single,CryEngine.Vec4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.Divide(CryEngine.Vec4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Negate(CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:CryEngine.Vec4.Negate(CryEngine.Vec4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Barycentric(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@,System.Single,System.Single,CryEngine.Vec4@)">
            <summary>
            Returns a <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:CryEngine.Vec4.Barycentric(CryEngine.Vec4,CryEngine.Vec4,CryEngine.Vec4,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Clamp(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:CryEngine.Vec4.Clamp(CryEngine.Vec4,CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Distance(CryEngine.Vec4@,CryEngine.Vec4@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:CryEngine.Vec4.DistanceSquared(CryEngine.Vec4@,CryEngine.Vec4@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.Distance(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:CryEngine.Vec4.DistanceSquared(CryEngine.Vec4,CryEngine.Vec4)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.DistanceSquared(CryEngine.Vec4@,CryEngine.Vec4@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.DistanceSquared(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.Dot(CryEngine.Vec4@,CryEngine.Vec4@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec4.Dot(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Normalize(CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.Normalize(CryEngine.Vec4)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Lerp(CryEngine.Vec4@,CryEngine.Vec4@,System.Single,CryEngine.Vec4@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.Lerp(CryEngine.Vec4,CryEngine.Vec4,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.SmoothStep(CryEngine.Vec4@,CryEngine.Vec4@,System.Single,CryEngine.Vec4@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec4.SmoothStep(CryEngine.Vec4,CryEngine.Vec4,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Hermite(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@,System.Single,CryEngine.Vec4@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:CryEngine.Vec4.Hermite(CryEngine.Vec4,CryEngine.Vec4,CryEngine.Vec4,CryEngine.Vec4,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:CryEngine.Vec4.CatmullRom(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@,System.Single,CryEngine.Vec4@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:CryEngine.Vec4.CatmullRom(CryEngine.Vec4,CryEngine.Vec4,CryEngine.Vec4,CryEngine.Vec4,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Max(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:CryEngine.Vec4.Max(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Min(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:CryEngine.Vec4.Min(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Orthogonalize(CryEngine.Vec4[],CryEngine.Vec4[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec4.Orthonormalize(CryEngine.Vec4[],CryEngine.Vec4[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec4.Transform(CryEngine.Vec4@,CryEngine.Quat@,CryEngine.Vec4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:CryEngine.Vec4"/>.</param>
        </member>
        <member name="M:CryEngine.Vec4.Transform(CryEngine.Vec4,CryEngine.Quat)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:CryEngine.Vec4"/>.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Transform(CryEngine.Vec4[],CryEngine.Quat@,CryEngine.Vec4[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec4.op_Addition(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_UnaryPlus(CryEngine.Vec4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Subtraction(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_UnaryNegation(CryEngine.Vec4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Multiply(System.Single,CryEngine.Vec4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Multiply(CryEngine.Vec4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Division(CryEngine.Vec4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Equality(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Inequality(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Explicit(CryEngine.Vec4)~CryEngine.Vec2">
            <summary>
            Performs an explicit conversion from <see cref="T:CryEngine.Vec4"/> to <see cref="T:CryEngine.Vec2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Explicit(CryEngine.Vec4)~CryEngine.Vec3">
            <summary>
            Performs an explicit conversion from <see cref="T:CryEngine.Vec4"/> to <see cref="T:CryEngine.Vec3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CryEngine.Vec4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.Equals(CryEngine.Vec4)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CryEngine.Vec4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.Equals(CryEngine.Vec4,System.Single)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CryEngine.Vec4"/> to compare with this instance.</param>
            <param name="epsilon">The amount of error allowed.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CryEngine.Vec4.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:CryEngine.Vec4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:CryEngine.Initialization.ScriptCompiler">
            <summary>
            Represents a custom script compiler.
            </summary>
        </member>
        <member name="M:CryEngine.Initialization.ScriptCompiler.ValidateCompilation(System.CodeDom.Compiler.CompilerResults)">
            <summary>
            Validates that a compilation has been successful.
            </summary>
            <param name="results">The results of the compilation that you wish to validate</param>
            <returns>The resulting assembly, if no errors are found.</returns>
        </member>
        <member name="T:CryEngine.Vec3">
            <summary>
            Represents a three dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:CryEngine.Vec3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CryEngine.Vec3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec3"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:CryEngine.Vec3.#ctor(CryEngine.Vec2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec3"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:CryEngine.Vec3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec3"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, and Z components of the vector. This must be an array with three elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than three elements.</exception>
        </member>
        <member name="M:CryEngine.Vec3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:CryEngine.Vec3.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec3.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:CryEngine.Vec3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A three-element array containing the components of the vector.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Add(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec3.Add(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Subtract(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec3.Subtract(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Multiply(CryEngine.Vec3@,System.Single,CryEngine.Vec3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CryEngine.Vec3.Multiply(CryEngine.Vec3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Modulate(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:CryEngine.Vec3.Modulate(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Divide(CryEngine.Vec3@,System.Single,CryEngine.Vec3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CryEngine.Vec3.Divide(CryEngine.Vec3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Negate(CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:CryEngine.Vec3.Negate(CryEngine.Vec3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Barycentric(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,System.Single,System.Single,CryEngine.Vec3@)">
            <summary>
            Returns a <see cref="T:CryEngine.Vec3"/> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:CryEngine.Vec3"/> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CryEngine.Vec3"/> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CryEngine.Vec3"/> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 3D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:CryEngine.Vec3.Barycentric(CryEngine.Vec3,CryEngine.Vec3,CryEngine.Vec3,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:CryEngine.Vec3"/> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:CryEngine.Vec3"/> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CryEngine.Vec3"/> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CryEngine.Vec3"/> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:CryEngine.Vec3"/> containing the 3D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Clamp(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:CryEngine.Vec3.Clamp(CryEngine.Vec3,CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:CryEngine.Vec3.ClampXYZ(CryEngine.Vec3,System.Single,System.Single)">
            <summary>
            Restricts entire vector to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:CryEngine.Vec3.MinXYZ(CryEngine.Vec3,System.Single)">
            <summary>
            Sets all values within vector to a specific minimum value
            </summary>
            <param name="value">The vector to restrict</param>
            <param name="min">The minimum value</param>
            <returns>Restricted vector</returns>
        </member>
        <member name="M:CryEngine.Vec3.MaxXYZ(CryEngine.Vec3,System.Single)">
            <summary>
            Sets all values within vector to a specific maximum value
            </summary>
            <param name="value">The vector to restrict</param>
            <param name="max">The maximum value</param>
            <returns>Restricted vector</returns>
        </member>
        <member name="M:CryEngine.Vec3.Cross(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains he cross product of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec3.Cross(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Distance(CryEngine.Vec3@,CryEngine.Vec3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            DistanceSquared(ref Vector3, ref Vector3, out float) may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec3.Distance(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            CryEngine.Vec3.DistanceSquared(Vector3, Vector3) may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec3.DistanceSquared(CryEngine.Vec3@,CryEngine.Vec3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec3.DistanceSquared(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec3.Dot(CryEngine.Vec3@,CryEngine.Vec3@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec3.Dot(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Normalize(CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:CryEngine.Vec3.Normalize(CryEngine.Vec3)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Lerp(CryEngine.Vec3@,CryEngine.Vec3@,System.Single,CryEngine.Vec3@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CryEngine.Vec3.Lerp(CryEngine.Vec3,CryEngine.Vec3,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CryEngine.Vec3.SmoothStep(CryEngine.Vec3@,CryEngine.Vec3@,System.Single,CryEngine.Vec3@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec3.SmoothStep(CryEngine.Vec3,CryEngine.Vec3,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Hermite(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,System.Single,CryEngine.Vec3@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:CryEngine.Vec3.Hermite(CryEngine.Vec3,CryEngine.Vec3,CryEngine.Vec3,CryEngine.Vec3,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:CryEngine.Vec3.CatmullRom(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,System.Single,CryEngine.Vec3@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:CryEngine.Vec3.CatmullRom(CryEngine.Vec3,CryEngine.Vec3,CryEngine.Vec3,CryEngine.Vec3,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Max(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:CryEngine.Vec3.Max(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Min(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:CryEngine.Vec3.Min(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Reflect(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:CryEngine.Vec3.Reflect(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:CryEngine.Vec3.Refract(CryEngine.Vec3@,CryEngine.Vec3@,System.Single,CryEngine.Vec3@)">
            <summary>
            Returns the fraction of a vector off a surface that has the specified normal and index.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="index">Index of refraction.</param>
            <param name="result">When the method completes, contains the refracted vector.</param>
        </member>
        <member name="M:CryEngine.Vec3.Refract(CryEngine.Vec3,CryEngine.Vec3,System.Single)">
            <summary>
            Returns the fraction of a vector off a surface that has the specified normal and index.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="index">Index of refraction.</param>
            <returns>The refracted vector.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Orthogonalize(CryEngine.Vec3[],CryEngine.Vec3[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec3.Orthonormalize(CryEngine.Vec3[],CryEngine.Vec3[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec3.Transform(CryEngine.Vec3@,CryEngine.Quat@,CryEngine.Vec3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:CryEngine.Vec4"/>.</param>
        </member>
        <member name="M:CryEngine.Vec3.Transform(CryEngine.Vec3,CryEngine.Quat)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:CryEngine.Vec4"/>.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Transform(CryEngine.Vec3[],CryEngine.Quat@,CryEngine.Vec3[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec3.op_Addition(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec3.op_UnaryPlus(CryEngine.Vec3)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:CryEngine.Vec3.op_Subtraction(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec3.op_UnaryNegation(CryEngine.Vec3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CryEngine.Vec3.op_Multiply(System.Single,CryEngine.Vec3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec3.op_Multiply(CryEngine.Vec3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec3.op_Division(CryEngine.Vec3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec3.op_Equality(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Vec3.op_Inequality(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Vec3.op_Explicit(CryEngine.Vec3)~CryEngine.Vec2">
            <summary>
            Performs an explicit conversion from <see cref="T:CryEngine.Vec3"/> to <see cref="T:CryEngine.Vec2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CryEngine.Vec3.op_Explicit(CryEngine.Vec3)~CryEngine.Vec4">
            <summary>
            Performs an explicit conversion from <see cref="T:CryEngine.Vec3"/> to <see cref="T:CryEngine.Vec4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CryEngine.Vec3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.Vec3.Equals(CryEngine.Vec3)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CryEngine.Vec3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Vec3.Equals(CryEngine.Vec3,System.Single)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CryEngine.Vec3"/> to compare with this instance.</param>
            <param name="epsilon">The amount of error allowed.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Vec3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CryEngine.Vec3.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:CryEngine.Vec3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="P:CryEngine.Vec3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:CryEngine.Vec3.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="T:CryEngine.Color">
            <summary>
            Defines a colour in terms of its red, green, blue and alpha values.
            </summary>
        </member>
        <member name="M:CryEngine.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new colour object specifying the red, green, blue and alpha values.
            </summary>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <param name="alpha"></param>
        </member>
        <member name="M:CryEngine.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new colour object specifying the red, green, and blue values.
            </summary>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
        </member>
        <member name="M:CryEngine.Color.#ctor(System.Single)">
            <summary>
            Constructs a new greyscale colour object.
            </summary>
            <param name="brightness">The brightness of the object, where 0 is black, and 1 is white.</param>
        </member>
        <member name="P:CryEngine.Color.R">
            <summary>
            The red value of the colour.
            </summary>
        </member>
        <member name="P:CryEngine.Color.G">
            <summary>
            The green value of the colour.
            </summary>
        </member>
        <member name="P:CryEngine.Color.B">
            <summary>
            The blue value of the colour.
            </summary>
        </member>
        <member name="P:CryEngine.Color.A">
            <summary>
            The alpha value of the colour.
            </summary>
        </member>
        <member name="T:CryEngine.NativeEntity">
            <summary>
            Used for non-CryMono entities, i.e. Lua / C++ such.
            </summary>
        </member>
        <member name="P:CryEngine.Terrain.Elevation">
            <summary>
            A read-only map of the terrain's elevation.
            </summary>
        </member>
        <member name="P:CryEngine.Terrain.Size">
            <summary>
            The size of the terrain in metres.
            </summary>
        </member>
        <member name="P:CryEngine.Terrain.UnitsPerMetre">
            <summary>
            The size of each terrain unit.
            </summary>
        </member>
        <member name="P:CryEngine.Terrain.UnitSize">
            <summary>
            The size of the terrain in units.
            </summary>
            <remarks>
            The terrain system calculates the overall size by multiplying this value by the units per metre setting. A map set to 1024 units at 2 metres per unit will have a size of 2048 metres.
            </remarks>
        </member>
        <member name="P:CryEngine.TerrainElevation.Item(System.Int32,System.Int32)">
            <summary>
            Accesses the elevation at a specified location.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:CryEngine.TerrainElevation.Item(System.Single,System.Single,System.Boolean)">
            <summary>
            Accesses the elevation at a specified location, with support for interpolated values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:CryEngine.Arduino.ArduinoHelper">
            <summary>
            Helper functions for Arduino communication.
            </summary>
        </member>
        <member name="P:CryEngine.Arduino.ArduinoHelper.Port">
            <summary>
            The main port used for serial communication.
            </summary>
        </member>
        <member name="M:CryEngine.UI._RegisterEvent(System.String,CryEngine.UIEventDirection,CryEngine.UIEventDescription)">
            <summary>
            Registers an event to the system
            </summary>
            <param name="eventsystem">The name of the eventsystem this is registered to</param>
            <param name="direction">Event direction (system -> UI or UI -> system)</param>
            <param name="desc">Descriptor of the event</param>
            <returns>-1 if registration failed, event ID otherwise</returns>
        </member>
        <member name="F:CryEngine.UI.toSystemEventSystems">
            <summary>
            Event systems handling UI -> System communication.
            </summary>
        </member>
        <member name="F:CryEngine.UI.toUIEventSystems">
            <summary>
            Event systems handling System -> UI communication.
            </summary>
        </member>
        <member name="T:CryEngine.Vec2">
            <summary>
            Represents a two dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:CryEngine.Vec2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec2"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CryEngine.Vec2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec2"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:CryEngine.Vec2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec2"/> struct.
            </summary>
            <param name="values">The values to assign to the X and Y components of the vector. This must be an array with two elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than two elements.</exception>
        </member>
        <member name="M:CryEngine.Vec2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:CryEngine.Vec2.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="M:CryEngine.Vec2.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:CryEngine.Vec2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Add(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec2.Add(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Subtract(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec2.Subtract(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Multiply(CryEngine.Vec2@,System.Single,CryEngine.Vec2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CryEngine.Vec2.Multiply(CryEngine.Vec2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Modulate(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:CryEngine.Vec2.Modulate(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Divide(CryEngine.Vec2@,System.Single,CryEngine.Vec2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CryEngine.Vec2.Divide(CryEngine.Vec2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Negate(CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:CryEngine.Vec2.Negate(CryEngine.Vec2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Barycentric(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@,System.Single,System.Single,CryEngine.Vec2@)">
            <summary>
            Returns a <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 2D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:CryEngine.Vec2.Barycentric(CryEngine.Vec2,CryEngine.Vec2,CryEngine.Vec2,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Clamp(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:CryEngine.Vec2.Clamp(CryEngine.Vec2,CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Distance(CryEngine.Vec2@,CryEngine.Vec2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:CryEngine.Vec2.DistanceSquared(CryEngine.Vec2@,CryEngine.Vec2@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.Distance(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:CryEngine.Vec2.DistanceSquared(CryEngine.Vec2,CryEngine.Vec2)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.DistanceSquared(CryEngine.Vec2@,CryEngine.Vec2@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.DistanceSquared(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.Dot(CryEngine.Vec2@,CryEngine.Vec2@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec2.Dot(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Perp(CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Calculates a vector that is perpendicular to the given vector.
            </summary>
            <param name="vector">The vector to base the perpendicular vector on.</param>
            <param name="result">When the method completes, contains the perpendicular vector.</param>
            <remarks>
            This method finds the perpendicular vector using a 90 degree counterclockwise rotation.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.Perp(CryEngine.Vec2)">
            <summary>
            Calculates a vector that is perpendicular to the given vector.
            </summary>
            <param name="vector">The vector to base the perpendicular vector on.</param>
            <returns>The perpendicular vector.</returns>
            <remarks>
            This method finds the perpendicular vector using a 90 degree counterclockwise rotation.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.PerpDot(CryEngine.Vec2@,CryEngine.Vec2@,System.Single@)">
            <summary>
            Calculates the perp dot product.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the perp dot product of the two vectors.</param>
            <remarks>
            The perp dot product is defined as taking the dot product of the perpendicular vector
            of the left vector with the right vector.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.PerpDot(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Calculates the perp dot product.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The perp dot product of the two vectors.</returns>
            <remarks>
            The perp dot product is defined as taking the dot product of the perpendicular vector
            of the left vector with the right vector.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.Normalize(CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:CryEngine.Vec2.Normalize(CryEngine.Vec2)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Lerp(CryEngine.Vec2@,CryEngine.Vec2@,System.Single,CryEngine.Vec2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.Lerp(CryEngine.Vec2,CryEngine.Vec2,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.SmoothStep(CryEngine.Vec2@,CryEngine.Vec2@,System.Single,CryEngine.Vec2@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec2.SmoothStep(CryEngine.Vec2,CryEngine.Vec2,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Hermite(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@,System.Single,CryEngine.Vec2@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:CryEngine.Vec2.Hermite(CryEngine.Vec2,CryEngine.Vec2,CryEngine.Vec2,CryEngine.Vec2,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:CryEngine.Vec2.CatmullRom(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@,System.Single,CryEngine.Vec2@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:CryEngine.Vec2.CatmullRom(CryEngine.Vec2,CryEngine.Vec2,CryEngine.Vec2,CryEngine.Vec2,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Max(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:CryEngine.Vec2.Max(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Min(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:CryEngine.Vec2.Min(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Reflect(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:CryEngine.Vec2.Reflect(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:CryEngine.Vec2.Orthogonalize(CryEngine.Vec2[],CryEngine.Vec2[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec2.Orthonormalize(CryEngine.Vec2[],CryEngine.Vec2[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec2.Transform(CryEngine.Vec2@,CryEngine.Quat@,CryEngine.Vec2@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:CryEngine.Vec4"/>.</param>
        </member>
        <member name="M:CryEngine.Vec2.Transform(CryEngine.Vec2,CryEngine.Quat)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:CryEngine.Vec4"/>.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Transform(CryEngine.Vec2[],CryEngine.Quat@,CryEngine.Vec2[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec2.op_Addition(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_UnaryPlus(CryEngine.Vec2)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Subtraction(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_UnaryNegation(CryEngine.Vec2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Multiply(System.Single,CryEngine.Vec2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Multiply(CryEngine.Vec2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Division(CryEngine.Vec2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Equality(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Inequality(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Explicit(CryEngine.Vec2)~CryEngine.Vec3">
            <summary>
            Performs an explicit conversion from <see cref="T:CryEngine.Vec2"/> to <see cref="T:CryEngine.Vec3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Explicit(CryEngine.Vec2)~CryEngine.Vec4">
            <summary>
            Performs an explicit conversion from <see cref="T:CryEngine.Vec2"/> to <see cref="T:CryEngine.Vec4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CryEngine.Vec2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.Equals(CryEngine.Vec2)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CryEngine.Vec2"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.Equals(CryEngine.Vec2,System.Single)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec2"/> is equal to this instance using an epsilon value.
            </summary>
            <param name="other">The <see cref="T:CryEngine.Vec2"/> to compare with this instance.</param>
            <param name="epsilon">The amount of error allowed.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CryEngine.Vec2.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:CryEngine.Vec2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="M:CryEngine.Renderer.LoadTexture(System.String)">
            <summary>
            Loads a texture into memory and generates its ID.
            </summary>
            <param name="texturePath">The path to the texture.</param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Renderer.DrawTexture(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a texture to the screen for one frame.
            </summary>
            <param name="xPos">The x position on the screen, relative to the top-left corner.</param>
            <param name="yPos">The y position on the screen, relative to the top-left corner.</param>
            <param name="width">The width to render the texture at.</param>
            <param name="height">The height to render the texture at.</param>
            <param name="textureId">The ID of the texture (obtained using Renderer.LoadTexture(path)).</param>
        </member>
        <member name="P:CryEngine.Renderer.ScreenHeight">
            <summary>
            The width of the screen in pixels.
            </summary>
        </member>
        <member name="P:CryEngine.Renderer.ScreenWidth">
            <summary>
            The height of the screen in pixels.
            </summary>
        </member>
        <member name="P:CryEngine.ViewParams.Position">
            <summary>
            view position
            </summary>
        </member>
        <member name="P:CryEngine.ViewParams.Rotation">
            <summary>
            view orientation
            </summary>
        </member>
        <member name="P:CryEngine.ViewParams.Nearplane">
            <summary>
            custom near clipping plane, 0 means use engine defaults
            </summary>
        </member>
        <member name="P:CryEngine.ViewParams.GroundOnly">
            <summary>
            view shake status
            </summary>
        </member>
        <member name="P:CryEngine.ViewParams.ShakingRatio">
            <summary>
            whats the amount of shake, from 0.0 to 1.0
            </summary>
        </member>
        <member name="P:CryEngine.ViewParams.CurrentShakeQuat">
            <summary>
            what the current angular shake
            </summary>
        </member>
        <member name="P:CryEngine.ViewParams.CurrentShakeShift">
            <summary>
            what is the current translational shake
            </summary>
        </member>
        <member name="P:CryEngine.ViewParams.TargetId">
            <summary>
            Who we're watching. 0 == nobody.
            </summary>
        </member>
        <member name="P:CryEngine.ViewParams.TargetPosition">
            <summary>
            Where the target was.
            </summary>
        </member>
        <member name="P:CryEngine.ViewParams.FrameTime">
            <summary>
            current dt.
            </summary>
        </member>
        <member name="P:CryEngine.ViewParams.AngleVelocity">
            <summary>
            previous rate of change of angle.
            </summary>
        </member>
        <member name="P:CryEngine.ViewParams.Velocity">
            <summary>
            previous rate of change of dist between target and camera.
            </summary>
        </member>
        <member name="P:CryEngine.ViewParams.Distance">
            <summary>
            previous dist of cam from target
            </summary>
        </member>
        <member name="T:CryEngine.Extensions.ReflectionExtensions">
            <summary>
            Useful extensions when working with reflection.
            </summary>
        </member>
        <member name="M:CryEngine.Extensions.ReflectionExtensions.ContainsAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Determines whether this member is decorated with at least one instance of a given attribute.
            </summary>
            <typeparam name="T">The attribute to search for.</typeparam>
            <param name="info">The member on which the search is performed.</param>
            <returns>True if the member is decorated with at least one instance of attribute T.</returns>
        </member>
        <member name="M:CryEngine.Extensions.ReflectionExtensions.ContainsAttribute``1(System.Reflection.MethodInfo)">
            <summary>
            Determines whether this method is decorated with at least one instance of a given attribute.
            </summary>
            <typeparam name="T">The attribute to search for.</typeparam>
            <param name="info">The method on which the search is performed.</param>
            <returns>True if the method is decorated with at least one instance of attribute T.</returns>
        </member>
        <member name="M:CryEngine.Extensions.ReflectionExtensions.Implements(System.Type,System.Type)">
            <summary>
            Determines whether a given type is the child of another.
            </summary>
            <param name="thisType">The child type.</param>
            <param name="baseType">The possible parent type.</param>
            <returns>True if thisType is a child of baseType.</returns>
        </member>
        <member name="M:CryEngine.Extensions.ReflectionExtensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the first instance of a given attribute on the selected member.
            </summary>
            <typeparam name="T">The attribute to search for.</typeparam>
            <param name="memberInfo">The member on which the search is performed.</param>
            <returns>The first instance of attribute T, or null if none is found.</returns>
        </member>
        <member name="M:CryEngine.Extensions.ReflectionExtensions.GetAttribute``1(System.Reflection.MethodInfo)">
            <summary>
            Gets the first instance of a given attribute on the selected method.
            </summary>
            <typeparam name="T">The attribute to search for.</typeparam>
            <param name="methodInfo">The method on which the search is performed.</param>
            <returns>The first instance of attribute T, or null if none is found.</returns>
        </member>
        <member name="M:CryEngine.Extensions.ReflectionExtensions.TryGetAttribute``1(System.Reflection.MethodInfo,``0@)">
            <summary>
            Tests whether the method is decorated with a given attribute, and if so, assigns it via the out variable.
            </summary>
            <typeparam name="T">The attribute to search for.</typeparam>
            <param name="method">The method on which the search is performed.</param>
            <param name="attribute">The out parameter to which the attribute will be assigned.</param>
            <returns>True if the attribute exists.</returns>
        </member>
        <member name="M:CryEngine.Extensions.ReflectionExtensions.TryGetAttribute``1(System.Reflection.MemberInfo,``0@)">
            <summary>
            Tests whether the member is decorated with a given attribute, and if so, assigns it via the out variable.
            </summary>
            <typeparam name="T">The attribute to search for.</typeparam>
            <param name="member">The member on which the search is performed.</param>
            <param name="attribute">The out parameter to which the attribute will be assigned.</param>
            <returns>True if the attribute exists.</returns>
        </member>
        <member name="T:CryEngine.PhysicsParams">
            <summary>
            Wrapper class to make physics parameters more intuitive.
            </summary>
        </member>
        <member name="M:CryEngine.PhysicsParams.Save">
            <summary>
            Save the current physics settings.
            </summary>
        </member>
        <member name="M:CryEngine.PhysicsParams.Clear">
            <summary>
            Clears the current physics settings.
            </summary>
        </member>
        <member name="P:CryEngine.PhysicsParams.AutoUpdate">
            <summary>
            If true, physics value updates will be automatically applied. Otherwise, Save() must be called manually.
            </summary>
        </member>
        <member name="P:CryEngine.PhysicsParams.Resting">
            <summary>
            Determines if this physical entity is in a sleeping state or not. (Will not be affected by gravity)
            Autoamtically wakes upon collision.
            </summary>
        </member>
        <member name="P:CryEngine.PhysicsParams.Mass">
            <summary>
            The mass of the entity in kg.
            </summary>
        </member>
        <member name="P:CryEngine.PhysicsParams.Slot">
            <summary>
            The entity slot for which these physical parameters apply.
            </summary>
        </member>
        <member name="P:CryEngine.PhysicsParams.Stiffness">
            <summary>
            For characters: the scale of force in joint springs.
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.slot">
            <summary>
            Index of object slot, -1 if all slots should be used.
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.density">
            <summary>
            Only one either density or mass must be set, parameter set to 0 is ignored.
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.stiffnessScale">
            <summary>
            Used for character physicalization (Scale of force in character joint's springs).
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.kInertia">
            <summary>
            inertia koefficient, the more it is, the less inertia is; 0 means no inertia
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.kInertiaAccel">
            <summary>
            inertia on acceleration
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.kAirControl">
            <summary>
            air control koefficient 0..1, 1 - special value (total control of movement)
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.kAirResistance">
            <summary>
            standard air resistance 
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.gravity">
            <summary>
            gravity vector, utilizes sv_gravity if null.
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.nodSpeed">
            <summary>
            vertical camera shake speed after landings
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.swimming">
            <summary>
            whether entity is swimming (is not bound to ground plane)
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.mass">
            <summary>
            mass (in kg)
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.surface_idx">
            <summary>
            surface identifier for collisions
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.minSlideAngle">
            <summary>
            if surface slope is more than this angle, player starts sliding (angle is in radians)
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.maxClimbAngle">
            <summary>
            player cannot climb surface which slope is steeper than this angle
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.maxJumpAngle">
            <summary>
            player is not allowed to jump towards ground if this angle is exceeded
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.minFallAngle">
            <summary>
            player starts falling when slope is steeper than this
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.maxVelGround">
            <summary>
            player cannot stand of surfaces that are moving faster than this
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.timeImpulseRecover">
            <summary>
            forcefully turns on inertia for that duration after receiving an impulse
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.collTypes">
            <summary>
            entity types to check collisions against
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.livingEntToIgnore">
            <summary>
            ignore collisions with this *living entity* (doesn't work with other entity types)
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.active">
            <summary>
            0 disables all simulation for the character, apart from moving along the requested velocity
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDynamics.iRequestedTime">
            <summary>
            requests that the player rolls back to that time and re-exucutes pending actions during the next step
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDimensions.heightPivot">
            <summary>
            offset from central ground position that is considered entity center
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDimensions.heightEye">
            <summary>
            vertical offset of camera
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDimensions.sizeCollider">
            <summary>
            collision cylinder dimensions
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDimensions.heightCollider">
            <summary>
            vertical offset of collision geometry center
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDimensions.headRadius">
            <summary>
            radius of the 'head' geometry (used for camera offset)
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDimensions.heightHead">
            <summary>
            center.z of the head geometry
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDimensions.dirUnproj">
            <summary>
            unprojection direction to test in case the new position overlaps with the environment (can be 0 for 'auto')
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDimensions.maxUnproj">
            <summary>
            maximum allowed unprojection
            </summary>
        </member>
        <member name="F:CryEngine.PlayerDimensions.useCapsule">
            <summary>
            switches between capsule and cylinder collider geometry
            </summary>
        </member>
        <member name="M:CryEngine.Matrix34.ScaleColumn(CryEngine.Vec3)">
            <summary>
            apply scaling to the columns of the matrix.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:CryEngine.Matrix34.Scale(CryEngine.Vec3)">
            <summary>
            apply scaling to matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Matrix34.TransformVector(CryEngine.Vec3)">
            <summary>
            transforms a vector. the translation is not beeing considered
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Matrix34.TransformPoint(CryEngine.Vec3)">
            <summary>
            transforms a point and add translation vector
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Matrix34.OrthonormalizeFast">
            <summary>
            Remove scale from matrix.
            </summary>
        </member>
        <member name="M:CryEngine.Matrix34.Determinant">
            <summary>
            determinant is ambiguous: only the upper-left-submatrix's determinant is calculated
            </summary>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Matrix34.SetSlerp(CryEngine.Matrix34,CryEngine.Matrix34,System.Single)">
            <summary>
             Direct-Matrix-Slerp: for the sake of completeness, I have included the following expression 
             for Spherical-Linear-Interpolation without using quaternions. This is much faster then converting 
             both matrices into quaternions in order to do a quaternion slerp and then converting the slerped 
             quaternion back into a matrix.
             This is a high-precision calculation. Given two orthonormal 3x3 matrices this function calculates 
             the shortest possible interpolation-path between the two rotations. The interpolation curve forms 
             a great arc on the rotation sphere (geodesic). Not only does Slerp follow a great arc it follows 
             the shortest great arc.	Furthermore Slerp has constant angular velocity. All in all Slerp is the 
             optimal interpolation curve between two rotations. 
             STABILITY PROBLEM: There are two singularities at angle=0 and angle=PI. At 0 the interpolation-axis 
             is arbitrary, which means any axis will produce the same result because we have no rotation. Thats 
             why I'm using (1,0,0). At PI the rotations point away from each other and the interpolation-axis 
             is unpredictable. In this case I'm also using the axis (1,0,0). If the angle is ~0 or ~PI, then we 
             have to normalize a very small vector and this can cause numerical instability. The quaternion-slerp 
             has exactly the same problems.																	Ivo
            </summary>
            <param name="m"></param>
            <param name="n"></param>
            <param name="t"></param>
            <example>Matrix33 slerp=Matrix33::CreateSlerp( m,n,0.333f );</example>
        </member>
        <member name="M:CryEngine.Matrix34.IsOrthonormal(System.Single)">
            <summary>
            check if we have an orthonormal-base (general case, works even with reflection matrices)
            </summary>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="T:CryEngine.ItemSystem">
            <summary>
            ItemSystem contains scriptbinds used in relation to the item system.
            </summary>
        </member>
        <member name="M:CryEngine.CryNetwork.InitializeNetworkStatics(System.Boolean,System.Boolean)">
            <summary>
            Initializes static variables which never change, i.e. IsEditor.
            </summary>
            <param name="isEditor"></param>
            <param name="isDedicated"></param>
        </member>
        <member name="M:CryEngine.CryNetwork.InitializeNetwork(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes variables which change, i.e. IsServer.
            </summary>
            <param name="isMultiplayer"></param>
            <param name="isClient"></param>
            <param name="isServer"></param>
        </member>
        <member name="T:CryEngine.Utilities.AssemblyReferenceHandler">
            <summary>
            Handles retrieval of required assemblies for compiled scripts etc.
            </summary>
        </member>
        <member name="M:CryEngine.Utilities.AssemblyReferenceHandler.GetRequiredAssembliesFromFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the required assemblies for the scripts passed to the method.
            Note: Does NOT exclude assemblies already loaded by CryMono.
            </summary>
            <param name="scriptFilePaths"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Utilities.AssemblyReferenceHandler.GetRequiredAssembliesFromSource(System.String[])">
            <summary>
            Gets the required assemblies for the source file passed to the method.
            Note: Does NOT exclude assemblies already loaded by CryMono.
            </summary>
            <param name="scriptFilePaths"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Utilities.AssemblyReferenceHandler.GetNamespacesFromScriptFile(System.String)">
            <summary>
            Gets the required assemblies for the script passed to the method.
            Note: Does NOT exclude assemblies already loaded by CryMono.
            </summary>
            <param name="scriptFilePath"></param>
            <returns></returns>
        </member>
        <member name="P:CryEngine.RaycastHit.ColliderId">
            <summary>
            PhysicalEntityId, not yet implemented.
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.SeperateImportantHits">
            <summary>
            among pierceble hits, materials with sf_important will have priority
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.CollissionTypeBit">
            <summary>
            used to manually specify collision geometry types (default is geom_colltype_ray)
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.CollissionTypeAny">
            <summary>
            if several colltype flag are specified, switches between requiring all or any of them in a geometry
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.Queue">
            <summary>
            queues the RWI request, when done it'll generate EventPhysRWIResult
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.ForcePiercableNonCollidable">
            <summary>
            non-colliding geometries will be treated as pierceable regardless of the actual material
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.DebugTrace">
            <summary>
            marks the rwi to be a debug rwi (used for spu debugging, only valid in non-release builds)
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.UpdateLastHit">
            <summary>
            update phitLast with the current hit results (should be set if the last hit should be reused for a "warm" start)
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.AnyHit">
            <summary>
            returns the first found hit for meshes, not necessarily the closest
            </summary>
        </member>
        <member name="T:CryEngine.EntityQueryFlags">
            <summary>
            Used for GetEntitiesInBox and RayWorldIntersection
            </summary>
        </member>
        <member name="F:CryEngine.EntityQueryFlags.SortByMass">
            <summary>
            sort by mass in ascending order
            </summary>
        </member>
        <member name="F:CryEngine.EntityQueryFlags.AllocateList">
            <summary>
            if not set, the function will return an internal pointer
            </summary>
        </member>
        <member name="F:CryEngine.EntityQueryFlags.AddRefResults">
            <summary>
            will call AddRef on each entity in the list (expecting the caller call Release)
            </summary>
        </member>
        <member name="F:CryEngine.EntityQueryFlags.Water">
            <summary>
            can only be used in RayWorldIntersection
            </summary>
        </member>
        <member name="F:CryEngine.EntityQueryFlags.NoOnDemandActivation">
            <summary>
            can only be used in RayWorldIntersection
            </summary>
        </member>
        <member name="F:CryEngine.EntityQueryFlags.DelayedDeformations">
            <summary>
            queues procedural breakage requests; can only be used in SimulateExplosion
            </summary>
        </member>
        <member name="T:CryEngine.BoundingBox">
            <summary>
            Represents an axis-aligned bounding box in three dimensional space.
            </summary>
        </member>
        <member name="F:CryEngine.BoundingBox.Minimum">
            <summary>
            The minimum point of the box.
            </summary>
        </member>
        <member name="F:CryEngine.BoundingBox.Maximum">
            <summary>
            The maximum point of the box.
            </summary>
        </member>
        <member name="M:CryEngine.BoundingBox.#ctor(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.BoundingBox"/> struct.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
        </member>
        <member name="M:CryEngine.BoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Intersects(CryEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Intersects(CryEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Intersects(CryEngine.Ray@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Intersects(CryEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Intersects(CryEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Intersects(CryEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Contains(CryEngine.Vec3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Contains(CryEngine.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Contains(CryEngine.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.FromPoints(CryEngine.Vec3[],CryEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CryEngine.BoundingBox.FromPoints(CryEngine.Vec3[])">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <returns>The newly constructed bounding box.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CryEngine.BoundingBox.FromSphere(CryEngine.BoundingSphere@,CryEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:CryEngine.BoundingBox.FromSphere(CryEngine.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Merge(CryEngine.BoundingBox@,CryEngine.BoundingBox@,CryEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:CryEngine.BoundingBox.Merge(CryEngine.BoundingBox,CryEngine.BoundingBox)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.op_Equality(CryEngine.BoundingBox,CryEngine.BoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.op_Inequality(CryEngine.BoundingBox,CryEngine.BoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Equals(CryEngine.BoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:CryEngine.Vec4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CryEngine.ContainmentType">
            <summary>
            Describes how one bounding volume contains another.
            </summary>
        </member>
        <member name="F:CryEngine.ContainmentType.Disjoint">
            <summary>
            The two bounding volumes don't intersect at all.
            </summary>
        </member>
        <member name="F:CryEngine.ContainmentType.Contains">
            <summary>
            One bounding volume completely contains another.
            </summary>
        </member>
        <member name="F:CryEngine.ContainmentType.Intersects">
            <summary>
            The two bounding volumes overlap.
            </summary>
        </member>
        <member name="T:CryEngine.Lua.ScriptTable">
            <summary>
            Represents a Lua ScriptTable.
            </summary>
        </member>
        <member name="T:CryEngine.Initialization.CryScript">
            <summary>
            Represents a given class.
            </summary>
        </member>
        <member name="P:CryEngine.Initialization.CryScript.ScriptName">
            <summary>
            The script's name, not always type name!
            </summary>
        </member>
        <member name="P:CryEngine.Initialization.CryScript.ScriptInstances">
            <summary>
            Stores all instances of this class.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.Unknown">
            <summary>
            Scripts will be linked to this type if they inherit from CryScriptInstance, but not any other script base.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.GameRules">
            <summary>
            Scripts directly inheriting from BaseGameRules will utilize this script type.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.FlowNode">
            <summary>
            Scripts directly inheriting from FlowNode will utilize this script type.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.Entity">
            <summary>
            Scripts directly inheriting from Entity will utilize this script type.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.Actor">
            <summary>
            Scripts directly inheriting from Actor will utilize this script type.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.UIEvent">
            <summary>
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.EditorForm">
            <summary>
            </summary>
        </member>
        <member name="T:CryEngine.GameRules">
            <summary>
            This is the base GameRules interface. All game rules must implement this.
            </summary>
            <remarks>For most use cases, deriving from CryGameCode's BaseGameRules is a more efficient solution.</remarks>
        </member>
        <member name="P:CryEngine.GameRulesAttribute.Name">
            <summary>
            Sets the game mode's name. Uses the class name if not set.
            </summary>
        </member>
        <member name="P:CryEngine.GameRulesAttribute.Default">
            <summary>
            If set to true, the game mode will be set as default.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.Timeout">
            <summary>
            This cause must be first! - timeout occurred.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.ProtocolError">
            <summary>
            Incompatible protocols.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.ResolveFailed">
            <summary>
            Failed to resolve an address.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.VersionMismatch">
            <summary>
            Versions mismatch.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.ServerFull">
            <summary>
            Server is full.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.Kicked">
            <summary>
            User initiated kick.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.Banned">
            <summary>
            Teamkill ban/ admin ban.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.ContextCorruption">
            <summary>
            Context database mismatch.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.AuthenticationFailed">
            <summary>
            Password mismatch, cdkey bad, etc.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.GameError">
            <summary>
            Misc. game error.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.NotDX11Capable">
            <summary>
            DX11 not found.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.NubDestroyed">
            <summary>
            The nub has been destroyed.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.ICMPError">
            <summary>
            Icmp reported error.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.NatNegError">
            <summary>
            NAT negotiation error.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.PunkDetected">
            <summary>
            Punk buster detected something bad.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.DemoPlaybackFinished">
            <summary>
            Demo playback finished.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.DemoPlaybackFileNotFound">
            <summary>
            Demo playback file not found.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.UserRequested">
            <summary>
            User decided to stop playing.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.NoController">
            <summary>
            User should have controller connected.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.CantConnect">
            <summary>
            Unable to connect to server.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.ArbitrationFailed">
            <summary>
            Arbitration failed in a live arbitrated session.
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.FailedToMigrateToNewHost">
            <summary>
            Failed to successfully join migrated game
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.SessionDeleted">
            <summary>
            The session has just been deleted
            </summary>
        </member>
        <member name="F:CryEngine.DisconnectionCause.Unknown">
            <summary>
            Unknown cause
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.ShooterId">
            <summary>
            EntityId of the shooter
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.TargetId">
            <summary>
            EntityId of the target which got shot
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.WeaponId">
            <summary>
            EntityId of the weapon
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.ProjectileId">
            <summary>
            0 if hit was not caused by a projectile
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.Damage">
            <summary>
            damage count of the hit
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.Radius">
            <summary>
            radius of the hit
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.MaterialId">
            <summary>
            material id of the surface which got hit
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.TypeId">
            <summary>
            type id of the hit, see IGameRules::GetHitTypeId for more information
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.BulletType">
            <summary>
            type of bullet, if hit was of type bullet
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.Pierceability">
            <summary>
            bullet pierceability
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.Position">
            <summary>
            position of the hit
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.Direction">
            <summary>
            direction of the hit
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.Aimed">
            <summary>
            set to true if shot was aimed - i.e. first bullet, zoomed in etc.
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.KnocksDown">
            <summary>
            true if the hit should knockdown
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.KnocksDownLeg">
            <summary>
            true if the hit should knockdown when hit in a leg
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.HitViaProxy">
            <summary>
            true if the 'shooter' didn't actually shoot, ie. a weapon acting on their behalf did (team perks)
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.Explosion">
            <summary>
            true if this hit directly results from an explosion
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.ArmorHeating">
            <summary>
            dynamic pierceability reduction
            </summary>
        </member>
        <member name="P:CryEngine.HitInfo.PenetrationCount">
            <summary>
            number of surfaces the bullet has penetrated
            </summary>
        </member>
        <member name="T:CryEngine.BoundingSphere">
            <summary>
            Represents a bounding sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:CryEngine.BoundingSphere.Center">
            <summary>
            The center of the sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:CryEngine.BoundingSphere.Radius">
            <summary>
            The radious of the sphere.
            </summary>
        </member>
        <member name="M:CryEngine.BoundingSphere.#ctor(CryEngine.Vec3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.BoundingBox"/> struct.
            </summary>
            <param name="center">The center of the sphere in three dimensional space.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.Ray@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Contains(CryEngine.Vec3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Contains(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines whether the current objects contains a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Contains(CryEngine.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Contains(CryEngine.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.FromPoints(CryEngine.Vec3[],CryEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:CryEngine.BoundingSphere.FromPoints(CryEngine.Vec3[])">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.FromBox(CryEngine.BoundingBox@,CryEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <param name="result">When the method completes, the newly constructed bounding sphere.</param>
        </member>
        <member name="M:CryEngine.BoundingSphere.FromBox(CryEngine.BoundingBox)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Merge(CryEngine.BoundingSphere@,CryEngine.BoundingSphere@,CryEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:CryEngine.BoundingSphere.Merge(CryEngine.BoundingSphere,CryEngine.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.op_Equality(CryEngine.BoundingSphere,CryEngine.BoundingSphere)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.op_Inequality(CryEngine.BoundingSphere,CryEngine.BoundingSphere)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Equals(CryEngine.BoundingSphere)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:CryEngine.Vec4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CryEngine.Utilities.CryStats">
            <summary>
            CryStats enables tracking of commonly used library statistics such as memory usage.
            </summary>
        </member>
        <member name="P:CryEngine.Utilities.CryStats.MemoryUsageMB">
            <summary>
            The current approximate memory usage in megabytes.
            </summary>
        </member>
        <member name="P:CryEngine.Utilities.CryStats.MemoryUsageKB">
            <summary>
            The current approximate memory usage in kilobytes.
            </summary>
        </member>
        <member name="P:CryEngine.Utilities.CryStats.MemoryUsage">
            <summary>
            The current approximate memory usage in bytes.
            </summary>
        </member>
        <member name="T:CryEngine.Time">
            <summary>
            Contains useful functions related to game timing.
            </summary>
        </member>
        <member name="P:CryEngine.Time.FrameStartTime">
            <summary>
            Returns the absolute time of the last frame start in milliseconds.
            </summary>
        </member>
        <member name="P:CryEngine.Time.DeltaTime">
            <summary>
            The time used to render the current frame. Useful for creating framerate independent operations.
            </summary>
            <example>public override void OnUpdate() { this.Position.X += 10 * CryTime.DeltaTime; }</example>
        </member>
        <member name="P:CryEngine.FlowNodeAttribute.Name">
            <summary>
            Name of the node, if not set will use the node class name.
            </summary>
        </member>
        <member name="P:CryEngine.FlowNodeAttribute.UICategory">
            <summary>
            Category in which the node will appear when right-clicking in the Flowgraph Editor.
            </summary>
        </member>
        <member name="P:CryEngine.FlowNodeAttribute.Category">
            <summary>
            The Sandbox filtering category
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeFlags.TargetEntity">
            <summary>
            This node targets an entity, entity id must be provided.
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeFlags.HideUI">
            <summary>
            This node cannot be selected by user for placement in flow graph UI.
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeFlags.DynamicOutput">
            <summary>
            This node is setup for dynamic output port growth in runtime.
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeFlags.Unremovable">
            <summary>
            This node cannot be deleted by the user.
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeCategory.Approved">
            <summary>
            This node is approved for designers
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeCategory.Advanced">
            <summary>
            This node is slightly advanced and approved.
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeCategory.Debug">
            <summary>
            This node is for debug purpose only.
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeCategory.Obsolete">
            <summary>
            This node is obsolete and is not available in the editor.
            </summary>
        </member>
        <member name="M:CryEngine.CVar.Register``1(System.String,``0,System.String,CryEngine.CVarFlags)">
            <summary>
            Invoked by a CVar after its creation. Should <b>not</b> be visible outside this assembly.
            </summary>
        </member>
        <member name="M:CryEngine.CVar.Get(System.String)">
            <summary>
            Gets a CVar by name
            </summary>
            <param name="name">The name of the CVar to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.CVar.TryGet(System.String,CryEngine.CVar@)">
            <summary>
            Firstly checks whether a specified CVar is valid, then if so, modifies the cvar reference
            </summary>
            <param name="name">The name of the CVar to retrieve</param>
            <param name="cvar">The CVar object to modify (usually blank)</param>
            <returns>True if the CVar exists, otherwise false</returns>
        </member>
        <member name="M:CryEngine.CVar.#ctor(System.String,System.Object,CryEngine.CVarFlags,System.String)">
            <summary>
            Used by CryConsole.RegisterCVar to construct the CVar.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="flags"></param>
            <param name="help"></param>
        </member>
        <member name="M:CryEngine.CVar.#ctor(System.String)">
            <summary>
            Used to construct an "empty" CVar used to handle C++ registered CVars.
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:CryEngine.CVarFlags.Null">
            <summary>
            just to have one recognizable spot where the flags are located in the Register call
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.Cheat">
            <summary>
            stays in the default state when cheats are disabled
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.ReadOnly">
            <summary>
            can not be changed by the user
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.WarningNotUsed">
            <summary>
             shows warning that this var was not used in config file
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.CopyName">
            <summary>
            otherwise the const char * to the name will be stored without copying the memory
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.Modified">
            <summary>
            Set when variable value modified.
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.WasInConfig">
            <summary>
            Set when variable was present in config file.
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.Bitfield">
            <summary>
            Allow bitfield setting syntax.
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.RestrictedMode">
            <summary>
            is visible and usable in restricted (normal user) console mode
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.Invisible">
            <summary>
            Invisible to the user in console
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.AlwaysOnChange">
            <summary>
            Always accept variable value and call on change callback even if variable value didnt change
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.BlockFrame">
            <summary>
            Blocks the execution of console commands for one frame
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.ConstCVar">
            <summary>
            Set if it is a const cvar not to be set inside cfg-files
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.CheatAlwaysCheck">
            <summary>
            This variable is critical to check in every hash, since it's extremely vulnerable
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.CheatNoCheck">
            <summary>
            This variable is set as VF_CHEAT but doesn't have to be checked/hashed since it's harmless to workaround
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.NotNetSyncedInternal">
            <summary>
            can be changed on client and when connecting the var not sent to the client (is set for all vars in Game/scripts/Network/cvars.txt)
            </summary>
        </member>
        <member name="T:CryEngine.CVarException">
            <summary>
            This exception is called when invalid CVar operations are performed.
            </summary>
        </member>
        <member name="M:CryEngine.Initialization.ScriptManager.InstantiateScript(System.String,System.Object[])">
            <summary>
            Instantiates a script using its name and interface.
            </summary>
            <param name="scriptName"></param>
            <param name="constructorParams"></param>
            <returns>New instance scriptId or -1 if instantiation failed.</returns>
        </member>
        <member name="M:CryEngine.Initialization.ScriptManager.RemoveInstance(System.Int32,System.Type)">
            <summary>
            Locates and destructs the script with the assigned scriptId.
            </summary>
            <param name="scriptId"></param>
        </member>
        <member name="M:CryEngine.Initialization.ScriptManager.OnUpdate(System.Single)">
            <summary>
            Called once per frame.
            </summary>
        </member>
        <member name="M:CryEngine.Initialization.ScriptManager.LoadLibrariesInFolder(System.String)">
            <summary>
            This function will automatically scan for C# dll (*.dll) files and load the types contained within them.
            </summary>
        </member>
        <member name="M:CryEngine.Initialization.ScriptManager.ProcessAssembly(System.Reflection.Assembly)">
            <summary>
            Processes a C# assembly and adds all found types to ScriptCompiler.CompiledScripts
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CryEngine.Initialization.ScriptManager.LoadAssembly(System.String)" -->
        <member name="M:CryEngine.Initialization.ScriptManager.ProcessTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Processes a type and adds all found types to ScriptCompiler.CompiledScripts
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:CryEngine.Initialization.ScriptManager.AddScriptInstance(CryEngine.CryScriptInstance)">
            <summary>
            Adds an script instance to the script collection and returns its new id.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="F:CryEngine.Initialization.ScriptManager.InvalidScriptInstance">
            <summary>
            Avoid creating a new empty CryScriptInstance each time we need to check
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptManager.LastScriptId">
            <summary>
            Last assigned ScriptId, next = + 1
            </summary>
        </member>
    </members>
</doc>
